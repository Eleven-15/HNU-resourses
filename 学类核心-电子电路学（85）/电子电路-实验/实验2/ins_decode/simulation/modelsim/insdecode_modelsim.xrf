vendor_name = ModelSim
source_file = 1, E:/Quartus II/quartus/insdecode/ins_decode.v
source_file = 1, E:/Quartus II/quartus/insdecode/db/insdecode.cbx.xml
design_name = ins_decode
instance = comp, \ir[6]~I , ir[6], ins_decode, 1
instance = comp, \ir[4]~I , ir[4], ins_decode, 1
instance = comp, \ir[7]~I , ir[7], ins_decode, 1
instance = comp, \Equal8~0 , Equal8~0, ins_decode, 1
instance = comp, \en~I , en, ins_decode, 1
instance = comp, \ir[0]~I , ir[0], ins_decode, 1
instance = comp, \ir[1]~I , ir[1], ins_decode, 1
instance = comp, \ir[3]~I , ir[3], ins_decode, 1
instance = comp, \mova~3 , mova~3, ins_decode, 1
instance = comp, \mova~4 , mova~4, ins_decode, 1
instance = comp, \ir[2]~I , ir[2], ins_decode, 1
instance = comp, \movb~2 , movb~2, ins_decode, 1
instance = comp, \movc~3 , movc~3, ins_decode, 1
instance = comp, \movc~4 , movc~4, ins_decode, 1
instance = comp, \Equal8~1 , Equal8~1, ins_decode, 1
instance = comp, \add~2 , add~2, ins_decode, 1
instance = comp, \Equal8~2 , Equal8~2, ins_decode, 1
instance = comp, \sub~3 , sub~3, ins_decode, 1
instance = comp, \Equal8~3 , Equal8~3, ins_decode, 1
instance = comp, \and1~4 , and1~4, ins_decode, 1
instance = comp, \Equal8~4 , Equal8~4, ins_decode, 1
instance = comp, \not1~5 , not1~5, ins_decode, 1
instance = comp, \Equal8~5 , Equal8~5, ins_decode, 1
instance = comp, \rsr~7 , rsr~7, ins_decode, 1
instance = comp, \rsl~7 , rsl~7, ins_decode, 1
instance = comp, \Equal8~6 , Equal8~6, ins_decode, 1
instance = comp, \jmp~8 , jmp~8, ins_decode, 1
instance = comp, \jz~8 , jz~8, ins_decode, 1
instance = comp, \jc~8 , jc~8, ins_decode, 1
instance = comp, \Equal8~7 , Equal8~7, ins_decode, 1
instance = comp, \in1~8 , in1~8, ins_decode, 1
instance = comp, \Equal8~8 , Equal8~8, ins_decode, 1
instance = comp, \out1~9 , out1~9, ins_decode, 1
instance = comp, \Equal8~9 , Equal8~9, ins_decode, 1
instance = comp, \nop~10 , nop~10, ins_decode, 1
instance = comp, \ir[5]~I , ir[5], ins_decode, 1
instance = comp, \halt~11 , halt~11, ins_decode, 1
instance = comp, \halt~12 , halt~12, ins_decode, 1
instance = comp, \mova~I , mova, ins_decode, 1
instance = comp, \movb~I , movb, ins_decode, 1
instance = comp, \movc~I , movc, ins_decode, 1
instance = comp, \add~I , add, ins_decode, 1
instance = comp, \sub~I , sub, ins_decode, 1
instance = comp, \and1~I , and1, ins_decode, 1
instance = comp, \not1~I , not1, ins_decode, 1
instance = comp, \rsr~I , rsr, ins_decode, 1
instance = comp, \rsl~I , rsl, ins_decode, 1
instance = comp, \jmp~I , jmp, ins_decode, 1
instance = comp, \jz~I , jz, ins_decode, 1
instance = comp, \jc~I , jc, ins_decode, 1
instance = comp, \in1~I , in1, ins_decode, 1
instance = comp, \out1~I , out1, ins_decode, 1
instance = comp, \nop~I , nop, ins_decode, 1
instance = comp, \halt~I , halt, ins_decode, 1
